{"version":3,"sources":["../../../src/graphql/actions/usersActions.js"],"names":["Date","prototype","addDays","days","date","valueOf","setDate","getDate","createToken","userData","exp","getTime","payload","_id","id","email","name","token","jwt","sign","process","env","JWT","addUserAction","UserModel","create","newUser","console","log","getAllUsersAction","find","populate","path","findUserAction","filter","findOne","updateUserAction","update","findOneAndUpdate","doLoginAction","userName","password","currentUser","bcrypt","compare","validLogin"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { UserModel } from '../../database/models';\r\nimport bcrypt from 'bcrypt';\r\n\r\nDate.prototype.addDays = function (days) {\r\n  const date = new Date(this.valueOf());\r\n  date.setDate(date.getDate() + days);\r\n  return date;\r\n};\r\n\r\nconst createToken = (userData) => {\r\n  const exp = new Date().addDays(5).getTime();\r\n  const payload = {\r\n    _id: userData.id,\r\n    email: userData.email,\r\n    name: userData.name,\r\n    exp,\r\n  };\r\n\r\n  const token = jwt.sign(payload, process.env.JWT);\r\n  return token;\r\n};\r\n\r\nconst addUserAction = async (userData) => {\r\n  try {\r\n    const newUser = await UserModel.create(userData);\r\n    const token = createToken(newUser);\r\n    console.log(\"User \" + newUser.name + \" created.\");\r\n    return { token };\r\n  } catch (error) {\r\n    console.log(\"TCL: addUserAction -> error\", error);\r\n  }\r\n};\r\n\r\nconst getAllUsersAction = async () => {\r\n  try {\r\n    return await UserModel.find().populate({\r\n      path: 'favorites',\r\n      populate: {\r\n       path: 'ingredients'\r\n     }\r\n   }).populate({ path: 'recetas' });\r\n  } catch (error) {\r\n    console.log(\"TCL: getAllUsersAction -> error\", error);\r\n  }\r\n};\r\n\r\nconst findUserAction = async (filter) => {\r\n  try {\r\n    return await UserModel.findOne(filter);\r\n  } catch (error) {\r\n    console.log(\"TCL: findUserAction -> error\", error);\r\n  }\r\n};\r\n\r\nconst updateUserAction = async (filter, update) => {\r\n  try {\r\n    return await UserModel.findOneAndUpdate(filter, update, { new: true });\r\n  } catch (error) {\r\n    console.log(\"TCL: updateUserAction -> error\", error);\r\n  }\r\n};\r\n\r\nconst doLoginAction = async (userName, password) => {\r\n  try {\r\n    const filter = { email: userName };\r\n    const currentUser = await findUserAction(filter);\r\n    console.log(\"User \" + currentUser.name +\" logged.\");\r\n    const validLogin = await bcrypt.compare(password, currentUser.password);\r\n    if (validLogin) {\r\n      const token = createToken(currentUser);\r\n      return { token };\r\n    }\r\n\r\n    return null;\r\n  } catch (error) {\r\n    console.log(\"TCL: doLoginAction -> error\", error);\r\n  }\r\n};\r\n\r\nexport {\r\n  addUserAction,\r\n  updateUserAction,\r\n  findUserAction,\r\n  getAllUsersAction,\r\n  doLoginAction\r\n};\r\n"],"file":"usersActions.js"}